<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jms="http://www.springframework.org/schema/jms" xmlns:osgi="http://www.springframework.org/schema/osgi"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
            http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
            http://www.springframework.org/schema/context
            http://www.springframework.org/schema/context/spring-context-2.5.xsd
            http://www.springframework.org/schema/osgi
			http://www.springframework.org/schema/osgi/spring-osgi.xsd
            http://www.springframework.org/schema/jms 
            http://www.springframework.org/schema/jms/spring-jms-2.5.xsd">

	<bean id="propertyConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="location">
			<!-- 这个bean是Spring Resource的一个实现类，完成读取全局配置文件的工作 -->
			<bean class="me.vurt.nms.core.common.io.GlobalConfigResouce">
				<constructor-arg value="nms-config.properties" />
			</bean>
		</property>
	</bean>

	<!-- a pooling based JMS provider -->
	<bean id="connectionFactory" class="org.apache.activemq.ActiveMQConnectionFactory">
		<property name="brokerURL">
			<value>${mq.broker.url}</value>
		</property>
	</bean>

	<bean id="jmsFactory" class="org.apache.activemq.pool.PooledConnectionFactory"
		destroy-method="stop">
		<property name="connectionFactory" ref="connectionFactory" />
	</bean>

	<!-- 客户端发送心跳信息的queue -->
	<bean id="heartBeatQueue" class="org.apache.activemq.command.ActiveMQQueue">
		<constructor-arg value="HeartBeat" />
	</bean>

	<!-- 负责发送心跳信息的jmsTemplate -->
	<bean id="heartBeatJmsTemplate" class="org.springframework.jms.core.JmsTemplate">
		<property name="connectionFactory" ref="jmsFactory" />
		<property name="deliveryPersistent" value="false" />
		<!-- 心跳信息只存活5秒 -->
		<property name="timeToLive" value="5000" />
		<property name="defaultDestination" ref="heartBeatQueue" />
	</bean>

	<!-- 复制发送心跳信息的消息生产者 -->
	<bean id="heartBeatMsgPrudcer" class="me.vurt.nms.core.jms.impl.MessageProducerImpl">
		<property name="jmsTemplate" ref="heartBeatJmsTemplate" />
	</bean>

	<!-- 实现心跳的工作类 -->
	<bean id="heartBeatJob" class="me.vurt.nms.core.node.client.HeartBeatJob">
		<constructor-arg ref="heartBeatMsgPrudcer" />
	</bean>

	<!-- 心跳任务触发器 -->
	<bean id="heartBeatTrigger" class="org.springframework.scheduling.quartz.SimpleTriggerBean">
		<property name="jobDetail">
			<bean id="heartBeatJobBean"
				class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
				<property name="targetObject" ref="heartBeatJob" />
				<property name="targetMethod" value="doHeartBeat" />
			</bean>
		</property>
		<!-- 插件的applicationContext初始化完成之后10秒开始执行第一次心跳 -->
		<property name="startDelay" value="10000" />
		<!-- 心跳间隔在全局配置文件中设置 -->
		<property name="repeatInterval" value="${client.heartBeat.repeatInterval}" />
	</bean>

	<!-- 心跳定时任务的启动器，SchedulerFactoryBean实际上是一个FactoryBean，通过id从context中获取的bean的真实类型是org.quartz.Scheduler -->
	<bean id="heartBeatScheduler"
		class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
		<!-- 初始化后不会自动开始发送心跳 -->
		<property name="autoStartup" value="false" />
		<property name="triggers">
			<list>
				<ref bean="heartBeatTrigger" />
			</list>
		</property>
	</bean>
</beans>