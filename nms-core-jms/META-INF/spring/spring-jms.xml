<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jms="http://www.springframework.org/schema/jms" xmlns:osgi="http://www.springframework.org/schema/osgi"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
            http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
            http://www.springframework.org/schema/context
            http://www.springframework.org/schema/context/spring-context-2.5.xsd
            http://www.springframework.org/schema/osgi
			http://www.springframework.org/schema/osgi/spring-osgi.xsd
            http://www.springframework.org/schema/jms 
            http://www.springframework.org/schema/jms/spring-jms-2.5.xsd">

	<!-- 根据节点类型引入不同的子配置文件 -->
	<!-- ${nms.node.type}是系统属性,即程序启动时的输入的VM args:-Dnms.node.type=server|client -->
	<import
		resource="classpath:META-INF/inner-configs/spring-jms-${nms.node.type}.xml" />

	<bean id="propertyConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="location">
			<!-- 这个bean是Spring Resource的一个实现类，完成读取全局配置文件的工作 -->
			<bean class="me.vurt.nms.core.common.io.GlobalConfigResouce">
				<constructor-arg value="nms-config.properties" />
			</bean>
		</property>
	</bean>

	<!-- 保存Bundle内部的applicationContext，方便在代码中获取 -->
	<bean id="applicationContext" class="me.vurt.nms.core.ApplicationContextHolder" />

	<!-- a pooling based JMS provider -->
	<bean id="connectionFactory" class="org.apache.activemq.ActiveMQConnectionFactory">
		<property name="brokerURL">
			<value>${mq.broker.url}</value>
		</property>
	</bean>

	<bean id="jmsFactory" class="org.apache.activemq.pool.PooledConnectionFactory"
		destroy-method="stop">
		<property name="connectionFactory" ref="connectionFactory" />
	</bean>

	<!-- 客户端发送心跳信息的queue -->
	<bean id="heartBeatQueue" class="org.apache.activemq.command.ActiveMQQueue">
		<constructor-arg value="HeartBeat" />
	</bean>

	<!-- 客户端注册使用的queue -->
	<bean id="registrationQueue" class="org.apache.activemq.command.ActiveMQQueue">
		<constructor-arg value="Registration" />
	</bean>

	<!-- 注册响应消息队列 -->
	<bean id="registrationResponseQueue" class="org.apache.activemq.command.ActiveMQQueue">
		<constructor-arg value="RegistrationResponse" />
	</bean>

	<!-- 服务器使用的广播通道 -->
	<bean id="nmsTopic" class="org.apache.activemq.command.ActiveMQTempTopic">
		<constructor-arg value="NMSTopic"></constructor-arg>
	</bean>

	<!-- 消息监听的bean -->
	<!-- 需要配合org.springframework.jms.listener.DefaultMessageListenerContainer和org.springframework.jms.listener.adapter.MessageListenerAdapter一起使用 -->
	<bean id="messageListener" class="me.vurt.nms.core.jms.MessageListener"
		scope="prototype" />
	
	<!-- 普通消息生产者，初始化后需要自己设置JmsTemplate -->	
	<bean id="producer" class="me.vurt.nms.core.jms.impl.MessageProducerImpl" scope="prototype"/>

</beans>